
Study name: Transcriptome profiling of type VI secretion system core gene tssM mutant of Xanthomonas perforans highlights regulators controlling diverse functions ranging from virulence to metabolism

Authors: Sivakumar Ramamoorthy1, Michelle Pena1, Palash Ghosh1, Ying-Yu Liao2, Mathews Paret2, Jeffrey B Jones2 and Neha Potnis1*
1 Department of Entomology and Plant Pathology, Auburn University, AL 36849
2 Department of Plant Pathology, University of Florida, Gainesville, FL 32611

*Corresponding author: email: nzp0024@auburn.edu

Running title: T6SS regulation in Xanthomonas


The following code is used to analyze RNASeq data collected on samples from in vitro experiment to identify differentially expressed genes among wild type X. perforans AL65 and tssM-i3* mutant at 8 and 16h post-inoculation in XVM2 medium. 

We used two parallel approaches epinatel (https://github.com/epinatel/Bacterial_RNAseq) and brnaseq (Barrick Lab) to analyze RNA-Seq data. The following code has been adopted and modified according to the computational resources available to us. The results from both analyses were compared. In the dataset presented in the manuscript, we have used the analysis obtained from epinatel pipeline.#################INPUT REQUIRED##################read file: inputA.fastq.gz#genome sequence: genomeX.fna#refseq genome annotation table:genomeX_feature_table.txt.gz Type ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/007/714/115/ it will open ftp directory to AL65 record#################INPUT PARSING #################awk 'BEGIN{FS="\t";OFS="\t"}{if ($2=="protein_coding") print $7,$8,$9,$17,$2,$10}' genomeX_feature_table.txt >genomeX2.CDS.bed awk 'BEGIN{FS="\t";OFS="\t"}{if ($2=="tRNA") print $7,$8,$9,$17,$2,$10}' genomeX_feature_table.txt >genomeX2.tRNA.bedawk 'BEGIN{FS="\t";OFS="\t"}{if ($2=="rRNA") print $7,$8,$9,$17,$2,$10}' genomeX_feature_table.txt >genomeX2.rRNA.bedawk 'BEGIN{FS="\t";OFS="\t"}{if (NR!=1 && $2!="rRNA" && $2!="tRNA" && $2!="protein_coding" && $2!="") print $7,$8,$9,$17,$2,$10}' genomeX_feature_table.txt >genomeX2.otherRNA.bed#######################################################################Checkpoint 1 FastQC evaluation and read trimming (only if necessary)#######################################################################fastqc inputA.fq.gzjava -jar trimmomatic-0.36.jar SE -phred33 inputA.fq.gz SampleA.fq.gz ILLUMINACLIP:<full path to the selected adapter files within trimmomatic directory>:2:30:10 CROP:X MINLEN:Z #orjava -jar trimmomatic-0.36.jar SE -phred33 inputA.fq.gz SampleA.fq.gz ILLUMINACLIP:<full path to the selected adapter files within trimmomatic directory>:2:30:10 MINLEN:Z SLIDINGWINDOW:A:B ############################################Step 1:read alignment and qual. filtering############################################Run trim-galore.sh script#!/bin/bashmodule load gnu_parallel/201612222parallel --xapply trim_galore --illumina --paired --fastqc -o trim_galore/ ::: *_1.fastq.gz ::: *_2.fastq.gzMapping using bwa-membwa index AL65.fnaRun bwa-mem.sh script as follows,#!/bin/bash#input fastq filesfor fq1 in ./*_1_val_1.fq.gz    do    echo "working with file $fq1"    base=$(basename $fq1 _1_val_1.fq.gz)    echo "base name is $base"    fq1=./${base}_1_val_1.fq.gz    fq2=./${base}_2_val_2.fq.gzbwa mem AL65.fna $fq1 $fq2 > ${base}.AL65.samdone#!/bin/bashfor file in *.AL65.sam;    do tag=${file%.AL65.sam};samtools view -S -h -F4 -q30 $tag.sam | awk 'BEGIN{OFS="\t";FS="\t"}{split($12,a,":"); if (a[3]>-15) print $0}' - | samtools view -S -h -b - >$tag.HQ.unsorted.bam #!/bin/bashfor file in *.HQ.unsorted.bam;    do tag=${file%.HQ.unsorted.bam};samtools sort $tag.HQ.unsorted.bam -o $tag.HQ.bamsamtools index $tag.HQ.bamdone## selection of HQ reads including multimappingcat <(samtools view -S -H SampleA.sam) <( samtools view -S -F4 -q30 SampleA.sam | grep -v "XS:i" - | awk 'BEGIN{OFS="\t";FS="\t"}{split($12,a,":"); if (a[3]>-15) print $0}' -) <(samtools view -S SampleA.sam |grep "XS:i" - |awk 'BEGIN{OFS="\t";FS="\t"}{split($12,a,":"); if (a[3]>=-15) print $0}' -) | samtools view -S -h -b - >SampleA.duplunsorted.HQ.bamsamtools sort SampleA.duplunsorted.HQ.bam SampleA.dupl.HQrm SampleA.duplunsorted.HQ.bam####################################Checkpoint 2 Alignment assessment####################################samtools flagstat SampleA.HQ.bam > SampleA.HQ.bam.statscat SampleA.bowtie.log >SampleA_quality_statsawk 'BEGIN{OFS="\t"}{if (NR==3) print "Number HQ reads",$1 }' SampleA.HQ.bam.stats >>SampleA_quality_stats################################################## ##Step 2:index generation for reads visualization###################################################   #!/bin/bashfor file in *.AL65.sam;    do tag=${file%.AL65.sam};samtools view -S -h -b -F4 $file | samtools sort - >$tag.AL65.bamsamtools index $tag.AL65.bamdone##################################################################################Check point 3 Relative rRNA percentage and global strand specificity evaluation###################################################################################!/bin/bashsource /opt/asn/etc/asn-bash-profiles-special/modules.shmodule load bedtools/2.29.2for file in *.AL65.bam;    do tag=${file%.AL65.bam};bedtools bamtobed -i $file > $tag.AL65.bedTRNA_READS_COVERAGE=`bedtools intersect -f 0.5 -b AL65.tRNA.bed -a $tag.AL65.bed | cut -f 4 | sort | uniq | wc -l`RRNA_READS_COVERAGE=`bedtools intersect -f 0.5 -b AL65.rRNA.bed -a $tag.AL65.bed | cut -f 4 | sort | uniq | wc -l`MRNA_READS_COVERAGE=`bedtools intersect -f 0.5 -b AL65.CDS.bed -a $tag.AL65.bed | cut -f 4 | sort | uniq | wc -l`samtools flagstat $tag.AL65.bam > $tag.AL65.bam.statsBAM_READS=`awk '{if (NR==3) print $1 }' $tag.AL65.bam.stats`PERC_RRNA_READS_COVERAGE=`echo "$RRNA_READS_COVERAGE $BAM_READS" |awk 'BEGIN{OFS="\t"}{print "rRNA relative percentage",$1/$2*100}'`PERC_MRNA_READS_COVERAGE=`echo "$MRNA_READS_COVERAGE $BAM_READS" |awk 'BEGIN{OFS="\t"}{ print "mRNA relative percentage",$1/$2*100}'`PERC_TRNA_READS_COVERAGE=`echo "$TRNA_READS_COVERAGE $BAM_READS" |awk 'BEGIN{OFS="\t"}{ print "tRNA relative percentage",$1/$2*100}'` cat AL65.CDS.bed AL65.rRNA.bed AL65.tRNA.bed AL65.otherRNA.bed >AL65.AllTranscripts.bedALL_SS_COVERAGE=`bedtools intersect -f 0.5 -a $tag.AL65.bed -b genomeX_AllTranscripts.bed -wb | awk 'BEGIN{FS="\t";OFS="\t";SS=0;OS=0;tot=0}{if ($6==$12){SS+=1}else{OS+=1};tot=tot+1}END{print "ALL:StrandSpecific =\t"(SS/tot)*100"\nALL:Opposite Strand =\t"(OS/tot)*100"\nALL:Tot Reads on TX =\t"tot}'`MRNA_SS_COVERAGE=`bedtools intersect -f 0.5 -a $tag.AL65.bed -b AL65.CDS.bed -wb | awk 'BEGIN{FS="\t";OFS="\t";SS=0;OS=0;tot=0}{if ($6==$12){SS+=1}else{OS+=1};tot=tot+1}END{print "mRNA:Strand Specific =\t"(SS/tot)*100"\nmRNA:Opposite Strand =\t"(OS/tot)*100"\nmRNA:Tot Reads on TX =\t"tot}' `RRNA_SS_COVERAGE=`bedtools intersect -f 0.5 -a $tag.AL65.bed -b AL65.rRNA.bed -wb | awk 'BEGIN{FS="\t";OFS="\t";SS=0;OS=0;tot=0}{if ($6==$12){SS+=1}else{OS+=1};tot=tot+1}END{print "rRNA:Strand Specific =\t"(SS/tot)*100"\nrRNA:Opposite Strand =\t"(OS/tot)*100"\nrRNA:Tot Reads on TX =\t"tot}' `TRNA_SS_COVERAGE=`bedtools intersect -f 0.5 -a $tag.AL65.bed -b AL65.tRNA.bed -wb | awk 'BEGIN{FS="\t";OFS="\t";SS=0;OS=0;tot=0}{if ($6==$12){SS+=1}else{OS+=1};tot=tot+1}END{print "tRNA:Strand Specific =\t"(SS/tot)*100"\ntRNA:Opposite Strand =\t"(OS/tot)*100"\ntRNA:Tot Reads on TX =\t"tot}' `################################################Step 3: Strand specific gene count production################################################ #!/bin/bashsource /opt/asn/etc/asn-bash-profiles-special/modules.shmodule load bedtools/2.29.2for file in *.HQ.bam;    do tag=${file%.HQ.bam};cat AL65.CDS.bed >Interesting_genes.bedbedtools intersect -abam $tag.HQ.bam -b Interesting_genes.bed -s > $tag.HQ_SS.bam bedtools bamtobed -i $tag.HQ_SS.bam > $tag.HQ_SS.bedbedtools intersect -b Interesting_genes.bed -a $tag.HQ_SS.bed -f 0.5 -s | bedtools coverage -b stdin -a Interesting_genes.bed -s > $tag.genes_coverage.bedcut -f 4,7 $tag.genes_coverage.bed > $tag.read_count #RPKM genecount productionMAPPED_READS=`wc -l $tag.HQ_SS.bed| awk '{print $1}' -`cat <(awk -v mapped="$MAPPED_READS" 'BEGIN{OFS="\t"}{if ($7>0){print $4,$7*1000000000/($9*mapped)}else{print $4,0}}' $tag.genes_coverage.bed | sort ) > $tag.genes_coverage.RPKM ##########################################Check point 4 genes coverage evaluation##########################################HQ_READS=`awk 'BEGIN{OFS="\t"}{if (NR==3) print "Number HQ reads",$1 }' SampleA.HQ.bam.stats`ZERO_COV=`awk 'BEGIN{FS="\t";OFS="\t";c=0}{if ($2>0)c=c+1}END{print "Percentage of not expressed genes",c/NR*100}' SampleA.read_count`DHT_COV=`awk -v dth=1 'BEGIN{FS="\t";OFS="\t";c=0}{if ($2>dth)c=c+1}END{print "Percentage of genes covered at least by one read",c/NR*100}' SampleA.read_count`NUMBER_OF_MRNA=`wc -l SampleA.read_count | cut -f1 -d " "`PERCENTILE_10=`echo $NUMBER_OF_MRNA-\($NUMBER_OF_MRNA/10\) | bc`PERCENTILE_10_COV=`sort -k2,2rn SampleA.read_count | awk -v pos=$PERCENTILE_10 'BEGIN{FS="\t";OFS="\t"}{if (NR==pos)print "Reads covering 90 percent of the genes",$2}'`COV_50=`mawk 'BEGIN{FS="\t";OFS="\t";c=0}{if ($10>0.5) c=c+1}END{print "Percentage of genes covered for at half of their lenght",c/NR*100}' SampleA.genes_coverage.bed`printf "$PERC_MRNA_READS_COVERAGE\n$PERC_RRNA_READS_COVERAGE\n$PERC_TRNA_READS_COVERAGE\n$ALL_SS_COVERAGE\n$MRNA_SS_COVERAGE\n$RRNA_SS_COVERAGE\n$TRNA_SS_COVERAGE\n$ZERO_COV\n$DHT_COV\n$PERCENTILE_10_COV\n$COV_50" >>SampleA_quality_stats#####################################Step 4a: gene counts normalization#####################################Rlibrary("DESeq2")library("ggplot2")> WT16h_repA <- read.table("WT116H_S5.read_count", row.names = 1)> WT16h_repB <- read.table("WT216H_S6.read_count", row.names = 1)> WT16h_repC <- read.table("WT316H_S7.read_count", row.names = 1)> WT16h_repD <- read.table("WT416H_S8.read_count", row.names = 1)> MT16h_repA <- read.table("MT116H_S13.read_count", row.names = 1)> MT16h_repB <- read.table("MT216H_S14.read_count", row.names = 1)> MT16h_repC <- read.table("MT316H_S15.read_count", row.names = 1)> MT16h_repD <- read.table("MT416H_S16.read_count", row.names = 1)> My_experiment_16h<-cbind(WT16h_repA, WT16h_repB, WT16h_repC, WT16h_repD,MT16h_repA, MT16h_repB, MT16h_repC, MT16h_repD)> colnames(My_experiment_16h)<- c("WT16h_repA","WT16h_repB","WT16h_repC","WT16h_repD", "MT16h_repA","MT16h_repB","MT16h_repC","MT16h_repD")> colData_My_experiment_16h = data.frame(row.names = colnames(My_experiment_16h), replica=c("A","B","C","D","A","B","C","D"), condition=c("WT16h","WT16h","WT16h","WT16h","MT16h","MT16h","MT16h","MT16h"))> dds <- DESeqDataSetFromMatrix(countData = My_experiment_16h ,colData= colData_My_experiment_16h, design = ~ condition)> rld <- rlogTransformation(dds, blind=TRUE)> data <- plotPCA(rld, intgroup=c("condition", "replica"),returnData=TRUE) > percentVar <- round(100 * attr(data,"percentVar")) > > pdf("PCA_samples_16h")> pdf("PCA_samples_16h.pdf")> pcaplot <- ggplot(data, aes(PC1, PC2, color=condition, shape=replica)) + geom_point(size=3) + xlab(paste0("PC1:",percentVar[1],"% variance")) + ylab(paste0 ("PC2:",percentVar[2],"% variance"))> ggsave(pcaplot, file=paste0("16h-ggplot2.pdf"))Saving 7 x 7 in image> dds$condition <- relevel(dds$condition, ref="WT16h")> dds2 <- DESeq(dds)estimating size factorsestimating dispersionsgene-wise dispersion estimatesmean-dispersion relationshipfinal dispersion estimatesfitting model and testing> res <- results(dds2) >res> write.csv(as.data.frame(res),file="condition_MT16h_VS_WT16h_results.csv")> write.csv(counts(dds,normalized=TRUE),file="normalized_counts.csv") Error in .local(object, ...) :   first calculate size factors, add normalizationFactors, or set normalized=FALSE> vsd.to.write = assay(vsd)> vsd <- vst(dds, blind=FALSE)> vsd.to.write = assay(vsd)> row.names(vsd.to.write) = row.names(counts)> write.csv(vsd.to.write, "vst.normalized.counts.csv", row.names=T)> rld <- rlog(dds, blind=FALSE)> rld.to.write = assay(vsd)> row.names(rld.to.write) = row.names(counts)> write.csv(rld.to.write, "rlog.normalized.counts.csv", row.names=T)#######################################Check point 5 Sample reproducibility#######################################rld <- rlogTransformation(dds, blind=TRUE)data <- plotPCA(rld, intgroup=c("condition", "replica"),returnData=TRUE) percentVar <- round(100 * attr(data,"percentVar")) pdf("PCA_samples")ggplot(data, aes(PC1, PC2, color=condition, shape=replica)) + geom_point(size=3) + xlab(paste0("PC1:",percentVar[1],"% variance")) + ylab(paste0 ("PC2:",percentVar[2],"% variance")) dev.off()###################################Step 4b: differential expression###################################  dds$condition <- relevel(dds$condition, ref="wildtype")dds2 <- DESeq(dds)res <- results(dds2) write.csv(as.data.frame(res),file="mutant_VS_wildtype_results.csv") write.csv(counts(dds,normalized=TRUE),file="normalized_counts.csv") #In the most recent version of the package not shrinked FC can be obtained as follows resMLE <- results(dds, addMLE=TRUE)write.csv(as.data.frame(resMLE),file="condition_treated_VS_untreated_resultswhithMLE.csv")USING BRNASEQ for RNAseq analysisconda create --name breseqconda activate breseqconda install -c bioconda breseqalso need to install htseq following same steps as above.Step 1. Clean reads.Bbduk scriptStep 2. Breseq needs to be run to obtain .gd file. Use following loop script to run breseq on all paired end reads.#!/bin/bashmodule load R/2.15.0for fq1 in ./*.clean_trim1.fqdoecho "working with file $fq1"base=$(basename $fq1 .clean_trim1.fq)echo "base name is $base"fq1=./${base}.clean_trim1.fqfq2=./${base}.clean_trim2.fqbreseq -c XpAL65.gbk $fq1 $fq2 -o ${base}_OUTdoneAfter running above script, output directory will have .gd file which you will need for the next step.Copy .gd file from each output directory with following command.cp ./brnaseq/*_OUT/output/*.gd ./brnaseq/01_Data/Step 3. To run brnaseq script, we need following folders.01_Data folder with MT116H_S13.gd02_Downloads folder with AL65.gff and AL65.fna files (.gff file from NCBI ftp site does not work, you need to run prokka to get .gff file).Run following command from brnaseq folder where brnaseq script is located.#!/bin/bashsource /opt/asn/etc/asn-bash-profiles-special/modules.shmodule load bowtie/1.1.2export PATH="$PATH://home/aubnxp/.conda/envs"module load anaconda/3-2019.10conda activate breseqconda activate htseqfor gd in ./01_Data/*.gddoecho "working with file $gd"base=$(basename $gd .gd)echo "base name is $base"brnaseq -j 48 -g 01_Data/$gd -o 03_Output/${base} -r 02_Downloads/AL65.gff `ls 02_Trimmed/${base}*`done#!/bin/bashsource /opt/asn/etc/asn-bash-profiles-special/modules.shmodule load bowtie/1.1.2export PATH="$PATH://home/aubnxp/.conda/envs"module load anaconda/3-2019.10conda activate breseqconda activate htseqbrnaseq -j 48 -g 01_Data/MT116H_S13.gd -o 03_Output/MT116H_S13 -r 02_Downloads/AL65.gff `ls 02_Trimmed/MT116H_S13*`Usage to collate output from multiple samples into one set of output spreadsheets.brnaseq FINISH [-d 03_Output] [-o final_output]next follow this R script as provided by Barrick lab. https://github.com/barricklab/brnaseq/blob/master/differential_gene_expression.R